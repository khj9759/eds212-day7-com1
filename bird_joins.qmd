---
title: "birds_joins"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

## Task1: 

In this section, you\'ll test and explore a number of different joins.

-   Create a new .Rmd in your `R` folder saved as `bird_joins.Rmd`

-   Read in the data sets and store the data frames as `bird_observations`, `sites`, `surveys`, and `taxalist` (it should be clear from the raw file names which is which)

-   Create a subset of `bird_observations` called `birds_subset` that only contains observations for birds with species id \"BHCO\" and \"RWBL\", and from sites with site ID \"LI-W\" and \"NU-C\"

```{r}
bird_observations <- read_csv(here::here("data","52_pp52_birds_1.csv"))
sites <- read_csv(here::here("data","52_pp52_sites_1.csv"))
surveys <- read_csv(here::here("data","52_pp52_surveys_1.csv"))
taxalist <- read_csv(here::here("data","52_pp52_taxalist_1.csv"))
```

```{r}
birds_subset <- bird_observations %>% filter (species_id %in% c("BHCO", "RWBL") & sites  %in% c("LI-W", "NU-C"))
```

### **Left join practice**

-   Use left join(s) to update `birds_subset` so that it also includes `sites` and `taxalist` information. For each join, include an explicit argument saying which variable you are joining by (even if it will just assume the correct one for you). Store the updated data frame as `birds_left`. Make sure to look at the output - is what it contains consistent with what you expected it to contain?

```{r}
bird_left <- left_join(birds_subset, sites)

bird_left_1 <- left_join(bird_left, taxalist)
```

### **Full join practice**

-   First, answer: what do you expect a `full_join()` between `birds_subset` and `sites` to contain?

-   Write code to `full_join` the `birds_subset` and `sites` data into a new object called `birds_full`. Explicitly include the variable you\'re joining by. Look at the output. Is it what you expected?

```{r}
 birds_full <- full_join(birds_subset,sites)
```

### **Inner join practice**

-   First, answer: what do you expect an `inner_join()` between `birds_subset` and `taxalist` to contain?

-   Write code to `inner_join()` the `birds_subset` and `taxalist`, called `birds_inner`. Include an argument for what variable you\'ll be joining by.

-   What would you get if instead of `inner_join()` you\'d used `left_join()` for this example? Try it out & check. Why does that make sense for this scenario? It what case would you expect the outcome to differ from an `inner_join()`?

```{r}
birds_inner <- inner_join(birds_subset,taxalist)
```

## **Task 2: Data wrangling and visualization with birds**

Continue in your same .Rmd that you created for Task 1

-   Starting with your `birds` object, rename the `notes` column to `bird_obs_notes` (so this doesn\'t conflict with `notes` in the `surveys` dataset

    ```{r}
    birds <- bird_observations %>% rename(bird_obs_notes = notes)
    ```

-   Then, create a subset that contains *all observations* in the `birds` dataset, joins the taxonomic, site and survey information to it, and is finally limited to only columns `survey_date`, `common_name`, `park_name`, and `bird_count`. You can decide the order that you want to create this in (e.g. limit the columns first, then join, or the other way around).

    ```{r}
    birds_1<- left_join(birds,sites)
    birds_2 <- left_join(birds_1,surveys)
    birds_3 <- left_join(birds_2,taxalist)

    birds_f <- birds_3 %>% 
      group_by(survey_date, common_name, park_name, bird_count) %>%
      summarize(sample_size = n())
      
    ```

-   Use `lubridate::month()` to add a new column called `survey_month`, containing only the month number. Then, convert the month number to a factor (again within `mutate()`)

    ```{r}
    birds_ff<- birds_f %>% 
      mutate(survey_month = lubridate::month(survey_date))
    ```

-   Learn a new function on your own! Use `dplyr::relocate()` to move the new `survey_month` column to immediately after the `survey_date` column. You can do this in a separate code chunk, or pipe straight into it from your existing code.

    ```{r}
    birds_relocate <- birds_ff %>% 
      relocate (survey_date, survey_month)
    ```

-   Find the total number of birds observed by *park* and *month* (i.e., you\'ll `group_by(park_name, survey_month)`)

    ```{r}
    birds_relocate %>%
      group_by(park_name,survey_month) %>%
      filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa"))
    ```

-   Filter to only include parks \"Lindo\", \"Orme\", \"Palomino\" and \"Sonrisa\"

```{r}
alarm_report <- data.frame(
  stringsAsFactors = FALSE,
              date = c("2020-03-14", "2020-03-15", "2020-04-10", "2020-04-18"),
          building = c("Engineering-North",
                       "Bren Hall","Engineering-South","Engr-North"),
     alarm_message = c("10:02am – HVAC system down, facilities management alerted",
                       "8:24am – Elevator North out of service",
                       "12:41am – Fire alarm, UCSB fire responded and cleared",
                       "9:58pm – Campus point emergency siren, UCPD responded")
)
```

-   Practice working with strings by writing code to update `alarm_report` as follows (these can be separate, or all as part of a piped sequence):

    -   Replace the \"Engr\" with \"Engineering\" in the `building` column

    -   Separate the `building` column into two separate columns, `building` and `wing`, separated at the dash

    -   Only keep observations with the word \"responded\" in the `alarm_message` column

    -   Separate the message *time* from the rest of the message by separating at `--`

    -   Convert the date column to a Date class using `lubridate`

```{r}

alarm_report %>%
  mutate(building = str_replace(building, pattern = "Engineering", replacement = "Engr"))
```

```{r}
building_new <- alarm_report %>% 
  separate(col = building, into = c("building", "wing"), sep = "-")
```

```{r}


alarm_report %>% 
  filter(str_detect(alarm_message, pattern = "responded"))
```

```{r}
alarm_report_message <- alarm_report %>% 
   separate(col = alarm_message, into = c("time", "message"), sep=" – ")
```

```{r}
lubridate::date(alarm_report$date)
```
